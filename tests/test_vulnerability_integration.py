import sys
import os

# Add the project directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.vulnerability_fetcher import fetch_and_store_vulnerabilities
from core.filter_vulnerabilities import filter_vulnerabilities
from tests.mock_arp_output import mock_arp_output

def test_vulnerability_integration():
    # Step 1: Fetch and store vulnerabilities
    fetch_and_store_vulnerabilities("Samsung", "samsung_vulnerabilities.json")
    fetch_and_store_vulnerabilities("Philips", "philips_vulnerabilities.json")
    fetch_and_store_vulnerabilities("Amazon", "amazon_vulnerabilities.json")

    # Step 2: Filter vulnerabilities for each device
    for device in mock_arp_output:
        print(f"Testing device: {device['manufacturer']} {device['device_type']}")
        for service in device["services"]:
            service_name = service["service"]
            version = service["version"]
            input_file = f"{device['manufacturer'].lower()}_vulnerabilities.json"
            cpe_match = None
            # Example CPE match, adjust according to your device specifics
            if device['manufacturer'].lower() == 'samsung':
                cpe_match = 'cpe:2.3:o:samsung:galaxy_s6'
            filtered_vulns = filter_vulnerabilities(input_file, service_name, version, cpe_match)
            if filtered_vulns:
                print(f"Filtered Vulnerabilities for {service_name} {version}:")
                for vuln in filtered_vulns:
                    print(vuln)
            else:
                print(f"No vulnerabilities found for {service_name} {version}.")

if __name__ == "__main__":
    test_vulnerability_integration()
