import sys
import os
import json

# Add the project directory to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from core.vulnerability_fetcher import fetch_and_store_vulnerabilities
from core.filter_vulnerabilities import filter_vulnerabilities
from tests.mock_arp_output import mock_arp_output

def vulnerability_integration():
    all_vulnerabilities = {}

    # Fetch and store vulnerabilities for each manufacturer
    manufacturers = set(device["manufacturer"] for device in mock_arp_output)
    for manufacturer in manufacturers:
        fetch_and_store_vulnerabilities(manufacturer, f"{manufacturer.lower()}_vulnerabilities.json")

    # Filter and collect vulnerabilities for each device
    for device in mock_arp_output:
        print(f"Testing device: {device['manufacturer']} {device['device_type']}")
        device_vulnerabilities = []
        for service in device["services"]:
            service_name = service["service"]
            version = service["version"]
            input_file = f"{device['manufacturer'].lower()}_vulnerabilities.json"
            cpe_match = None
            filtered_vulns = filter_vulnerabilities(input_file, service_name, version, cpe_match)
            device_vulnerabilities.extend(filtered_vulns)
            print(f"Filtered Vulnerabilities for {service_name} {version}:")
            if filtered_vulns:
                for vuln in filtered_vulns:
                    print(vuln)
            else:
                print(f"No vulnerabilities found for {service_name} {version}.")
        all_vulnerabilities[f"{device['manufacturer']}_{device['device_type'].replace(' ', '_')}"] = device_vulnerabilities

    # Save all vulnerabilities to a single JSON file
    with open("all_devices_vulnerabilities.json", 'w') as f:
        json.dump(all_vulnerabilities, f, indent=4)

    # Optionally, remove the individual files to clean up
    for manufacturer in manufacturers:
        os.remove(f"{manufacturer.lower()}_vulnerabilities.json")

if __name__ == "__main__":
    vulnerability_integration()
